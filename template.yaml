AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless WebSocket Chat - API Gateway + Lambda + DynamoDB

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 256
    Tracing: Active

Parameters:
  StageName:
    Type: String
    Default: prod

Resources:
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TableName: !Sub "chat-connections-${StageName}"

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: room
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: room
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TableName: !Sub "chat-messages-${StageName}"

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: connect.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  DisconnectFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: disconnect.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  SendMessageFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: sendMessage.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          MESSAGES_TABLE: !Ref MessagesTable
          WS_API_ID: !Ref WebSocketApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: "*"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFn.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFn.Arn}/invocations"

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFn.Arn}/invocations"

  RouteConnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectIntegration}"

  RouteDisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${DisconnectIntegration}"

  RouteSendMessage:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "sendMessage"
      AuthorizationType: NONE
      Target: !Sub "integrations/${SendMessageIntegration}"

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - RouteConnect
      - RouteDisconnect
      - RouteSendMessage
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref StageName
      DeploymentId: !Ref Deployment

  PermsConnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConnectFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect"

  PermsDisconnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DisconnectFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect"

  PermsSendMessage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendMessageFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/sendMessage"

Outputs:
  WebSocketUrl:
    Description: WebSocket URL
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
